"""
Comprehensive vulnerability database system
"""
import json
from typing import Dict, List, Optional
from datetime import datetime

class VulnerabilityDatabase:
    def __init__(self, db_path: str = "data/vulnerabilities.json"):
        self.db_path = db_path
        self.vulnerabilities = self._load_database()
        self._setup_database()
    
    def _load_database(self) -> Dict:
        """Load vulnerability database from file"""
        try:
            if not os.path.exists(self.db_path):
                self._create_default_database()
            
            with open(self.db_path, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"Error loading database: {e}")
            return {}
    
    def _create_default_database(self):
        """Create default vulnerability database"""
        default_data = {
            "metadata": {
                "version": "1.0",
                "last_updated": datetime.now().isoformat(),
                "source": "NVD, CVE, OWASP"
            },
            "vulnerabilities": {
                "web": {
                    "sql_injection": {
                        "severity": "high",
                        "description": "SQL injection vulnerability",
                        "cve": ["CVE-2023-1234"],
                        "exploitability": "high",
                        "fix": "Use prepared statements"
                    },
                    "xss": {
                        "severity": "medium",
                        "description": "Cross-site scripting vulnerability",
                        "cve": ["CVE-2023-5678"],
                        "exploitability": "medium",
                        "fix": "Sanitize user input"
                    }
                },
                "network": {
                    "ssh_bruteforce": {
                        "severity": "medium",
                        "description": "SSH brute force attack",
                        "cve": ["CVE-2023-9101"],
                        "exploitability": "medium",
                        "fix": "Enable fail2ban"
                    }
                }
            }
        }
        
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        with open(self.db_path, 'w') as f:
            json.dump(default_data, f, indent=4)
    
    def _setup_database(self):
        """Setup database structure if needed"""
        if not self.vulnerabilities:
            self._create_default_database()
            self.vulnerabilities = self._load_database()
    
    def get_vulnerability(self, category: str, name: str) -> Optional[Dict]:
        """Get specific vulnerability details"""
        try:
            return self.vulnerabilities["vulnerabilities"][category].get(name)
        except KeyError:
            return None
    
    def search_vulnerabilities(self, query: str) -> List[Dict]:
        """Search vulnerabilities by keyword"""
        results = []
        for category, vulns in self.vulnerabilities["vulnerabilities"].items():
            for name, details in vulns.items():
                if query.lower() in name.lower() or query.lower() in details.get("description", "").lower():
                    results.append({
                        "category": category,
                        "name": name,
                        "details": details
                    })
        return results
    
    def update_vulnerability(self, category: str, name: str, data: Dict):
        """Update or add a vulnerability"""
        if category not in self.vulnerabilities["vulnerabilities"]:
            self.vulnerabilities["vulnerabilities"][category] = {}
        
        self.vulnerabilities["vulnerabilities"][category][name] = data
        self.vulnerabilities["metadata"]["last_updated"] = datetime.now().isoformat()
        
        with open(self.db_path, 'w') as f:
            json.dump(self.vulnerabilities, f, indent=4)
    
    def get_vulnerabilities_by_severity(self, severity: str) -> List[Dict]:
        """Get vulnerabilities by severity level"""
        results = []
        for category, vulns in self.vulnerabilities["vulnerabilities"].items():
            for name, details in vulns.items():
                if details.get("severity") == severity:
                    results.append({
                        "category": category,
                        "name": name,
                        "details": details
                    })
        return results
    
    def get_vulnerabilities_by_cve(self, cve_id: str) -> List[Dict]:
        """Get vulnerabilities by CVE ID"""
        results = []
        for category, vulns in self.vulnerabilities["vulnerabilities"].items():
            for name, details in vulns.items():
                if cve_id in details.get("cve", []):
                    results.append({
                        "category": category,
                        "name": name,
                        "details": details
                    })
        return results
    
    def get_exploitable_vulnerabilities(self) -> List[Dict]:
        """Get all exploitable vulnerabilities"""
        results = []
        for category, vulns in self.vulnerabilities["vulnerabilities"].items():
            for name, details in vulns.items():
                if details.get("exploitability") in ["high", "critical"]:
                    results.append({
                        "category": category,
                        "name": name,
                        "details": details
                    })
        return results


"""
Comprehensive vulnerability scanner combining multiple tools
"""
import subprocess
import logging
import json
import xml.etree.ElementTree as ET
from typing import Dict, List, Any
import requests
import time

class VulnerabilityScanner:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
    def run_nikto_scan(self, target: str) -> Dict[str, Any]:
        """Run Nikto web vulnerability scanner"""
        try:
            result = subprocess.run([
                "nikto", "-h", target, "-Format", "json", "-output", "/tmp/nikto_output.json"
            ], capture_output=True, text=True, timeout=600)
            
            vulnerabilities = []
            try:
                with open("/tmp/nikto_output.json", "r") as f:
                    nikto_data = json.load(f)
                    
                for vuln in nikto_data.get("vulnerabilities", []):
                    vulnerabilities.append({
                        "scanner": "Nikto",
                        "type": "Web Vulnerability",
                        "description": vuln.get("msg", ""),
                        "url": vuln.get("url", ""),
                        "severity": "Medium"
                    })
            except Exception as e:
                self.logger.error(f"Failed to parse Nikto output: {e}")
            
            return {"vulnerabilities": vulnerabilities}
            
        except Exception as e:
            self.logger.error(f"Nikto scan failed: {e}")
            return {"vulnerabilities": []}
    
    def run_xsstrike_scan(self, target: str) -> Dict[str, Any]:
        """Run XSStrike for XSS vulnerability detection"""
        try:
            result = subprocess.run([
                "python3", "-m", "xsstrike", "-u", target, "--crawl"
            ], capture_output=True, text=True, timeout=600)
            
            vulnerabilities = []
            if "XSS" in result.stdout:
                vulnerabilities.append({
                    "scanner": "XSStrike",
                    "type": "Cross-Site Scripting (XSS)",
                    "description": "Potential XSS vulnerability detected",
                    "url": target,
                    "severity": "High",
                    "evidence": result.stdout
                })
            
            return {"vulnerabilities": vulnerabilities}
            
        except Exception as e:
            self.logger.error(f"XSStrike scan failed: {e}")
            return {"vulnerabilities": []}
    
    def run_sqlmap_scan(self, target: str, params: Dict[str, str] = None) -> Dict[str, Any]:
        """Run SQLMap for SQL injection detection"""
        try:
            cmd = ["sqlmap", "-u", target, "--batch", "--random-agent"]
            
            if params:
                # Create data string for POST parameters
                data_string = "&".join([f"{k}={v}" for k, v in params.items()])
                cmd.extend(["--data", data_string])
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
            
            vulnerabilities = []
            if "sqlmap identified the following injection point" in result.stdout:
                vulnerabilities.append({
                    "scanner": "SQLMap",
                    "type": "SQL Injection",
                    "description": "SQL injection vulnerability detected",
                    "url": target,
                    "severity": "Critical",
                    "evidence": result.stdout
                })
            
            return {"vulnerabilities": vulnerabilities}
            
        except Exception as e:
            self.logger.error(f"SQLMap scan failed: {e}")
            return {"vulnerabilities": []}
    
    def run_nmap_vuln_scan(self, target: str) -> Dict[str, Any]:
        """Run Nmap vulnerability scripts"""
        try:
            result = subprocess.run([
                "nmap", "-sV", "--script", "vuln", target, "-oX", "/tmp/nmap_vuln.xml"
            ], capture_output=True, text=True, timeout=600)
            
            vulnerabilities = []
            try:
                tree = ET.parse("/tmp/nmap_vuln.xml")
                root = tree.getroot()
                
                for host in root.findall("host"):
                    for port in host.findall(".//port"):
                        for script in port.findall(".//script"):
                            if "VULNERABLE" in script.get("output", ""):
                                vulnerabilities.append({
                                    "scanner": "Nmap",
                                    "type": "Service Vulnerability",
                                    "description": script.get("output", ""),
                                    "port": port.get("portid"),
                                    "service": script.get("id"),
                                    "severity": "High"
                                })
            except Exception as e:
                self.logger.error(f"Failed to parse Nmap XML: {e}")
            
            return {"vulnerabilities": vulnerabilities}
            
        except Exception as e:
            self.logger.error(f"Nmap vulnerability scan failed: {e}")
            return {"vulnerabilities": []}
    
    def comprehensive_scan(self, target: str) -> Dict[str, Any]:
        """Run comprehensive vulnerability scan"""
        self.logger.info(f"Starting comprehensive vulnerability scan for {target}")
        
        all_results = {
            "target": target,
            "scan_time": time.time(),
            "vulnerabilities": [],
            "scanners_used": []
        }
        
        # Run different scanners
        scanners = [
            ("Nikto", self.run_nikto_scan),
            ("XSStrike", self.run_xsstrike_scan),
            ("SQLMap", self.run_sqlmap_scan),
            ("Nmap", self.run_nmap_vuln_scan)
        ]
        
        for scanner_name, scanner_func in scanners:
            try:
                self.logger.info(f"Running {scanner_name} scan...")
                result = scanner_func(target)
                all_results["vulnerabilities"].extend(result.get("vulnerabilities", []))
                all_results["scanners_used"].append(scanner_name)
            except Exception as e:
                self.logger.error(f"Scanner {scanner_name} failed: {e}")
        
        # Deduplicate and prioritize vulnerabilities
        all_results["vulnerabilities"] = self.deduplicate_vulnerabilities(
            all_results["vulnerabilities"]
        )
        
        self.logger.info(f"Found {len(all_results['vulnerabilities'])} vulnerabilities")
        return all_results
    
    def deduplicate_vulnerabilities(self, vulnerabilities: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Remove duplicate vulnerabilities"""
        seen = set()
        unique_vulns = []
        
        for vuln in vulnerabilities:
            # Create a signature for the vulnerability
            signature = f"{vuln.get('type', '')}-{vuln.get('url', '')}-{vuln.get('port', '')}"
            
            if signature not in seen:
                seen.add(signature)
                unique_vulns.append(vuln)
        
        # Sort by severity
        severity_order = {"Critical": 0, "High": 1, "Medium": 2, "Low": 3}
        unique_vulns.sort(key=lambda x: severity_order.get(x.get("severity", "Low"), 3))
        
        return unique_vulns
